package main

import (
	"fmt"
)

type Stack struct {
	items []rune
}

func (s *Stack) Push(item rune) {
	s.items = append(s.items, item)
}

func (s *Stack) Pop() (rune, bool) {
	if len(s.items) == 0 {
		return ' ', false
	}
	lastIndex := len(s.items) - 1
	item := s.items[lastIndex]
	s.items = s.items[:lastIndex]
	return item, true
}

func isPalindrome(word string) bool {
	var stack Stack

	for _, char := range word {
		stack.Push(char)
	}

	var reversed []rune
	for len(stack.items) > 0 {
		char, _ := stack.Pop()
		reversed = append(reversed, char)
	}

	return word == string(reversed)
}

func main() {
	words := []string{"radar", "arara", "golang", "level", "hello"}

	for _, word := range words {
		if isPalindrome(word) {
			fmt.Printf(" \"%s\" e um palindromo\n", word)
		} else {
			fmt.Printf(" \"%s\" NAO e um palindromo\n", word)
		}
	}
}
